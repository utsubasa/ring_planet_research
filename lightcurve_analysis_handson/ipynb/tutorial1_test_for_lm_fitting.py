# -*- coding: utf-8 -*-
"""Tutorial1_test_for_LM_fitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dO2_GEBMTSUzMpEOWLpfvSHR2q7KGinu
"""

## Fitting
from numpy import exp, sin
from numpy import linspace, random
from scipy.optimize import leastsq
import matplotlib.pyplot as plt
import numpy as np

## Use of scipy optimizer (lmfit)
def residual(variables, x, data, eps_data):
    """Model a decaying sine wave and subtract data."""
    amp = variables[0]
    phaseshift = variables[1]
    freq = variables[2]
    decay = variables[3]

    model = amp * sin(x*freq + phaseshift) * exp(-x*x*decay)

    return (data-model) / eps_data

# generate synthetic data with noise
x = linspace(0, 100)
error_scale = 0.2
input_para = np.array([7.5, 0.22, 2.5, 0.01])
eps_data = random.normal(size=x.size, scale=error_scale)
data = input_para[0] * sin(x*input_para[1] + input_para[2]) * exp(-x*x*input_para[3]) + eps_data
plt.plot(x, data)
plt.errorbar(x, data,error_scale)
plt.show()

## fitting with least square from scipy
init_variables = [10.0, 0.2, 3.0, 0.007]
out = leastsq(residual, init_variables, args=(x, data, eps_data))
print("fitting_result:", out)
print("input_params:", input_para)

## fitting with the Levenbergâ€“Marquardt algorithm (LM method)
from numpy import exp, sin
import numpy as np
from lmfit import minimize, Parameters
import lmfit

def residual(params, x, data, eps_data):
    amp = params['amp']
    phaseshift = params['phase']
    freq = params['frequency']
    decay = params['decay']
    model = amp * sin(x*freq + phaseshift) * exp(-x*x*decay)
    return (data-model) / eps_data


params = Parameters()
params.add('amp', value=10, min=3, max = 11)
params.add('decay', value=0.007)
params.add('phase', value=0.2)
params.add('frequency', value=3.0)

out = minimize(residual, params, args=(x, data, eps_data))
print(out.params)
print(lmfit.fit_report(out.params))

