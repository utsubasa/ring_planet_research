'''
"""この部分はどのエポックナンバーがどのエポックか見るときに使う。"""
ax = lc.scatter()
for i, mid_transit_time in enumerate(transit_time_list):
    print(f'epoch: {i}')
    epoch_start = mid_transit_time - (duration*2.5)
    epoch_end = mid_transit_time + (duration*2.5)
    tmp = lc[lc.time.value > epoch_start]
    each_lc = tmp[tmp.time.value < epoch_end]
    #ax = lc.scatter()
    #if i == 9:
        #ax.axvline(mid_transit_time)
plt.show()
import pdb; pdb.set_trace()
'''
'''
#print('fixing t0...')
print('checking TTV...')
time.sleep(1)
for i, mid_transit_time in enumerate(transit_time_list):
    print(f'epoch: {i}')
    epoch_start = mid_transit_time - (duration*2.5)
    epoch_end = mid_transit_time + (duration*2.5)
    tmp = lc[lc.time.value > epoch_start]
    each_lc = tmp[tmp.time.value < epoch_end]
    #ax = lc.scatter()
    #ax.axvline(mid_transit_time)
    #plt.show()
    each_lc = each_lc.fold(period=period, epoch_time=mid_transit_time).remove_nans()

    """解析中断条件を満たさないかチェック"""
    if len(each_lc) == 0:
        print('no data in this epoch')
        continue
    abort_list = np.array([transit_case_is4(each_lc, duration, period), aroud_midtransitdata_isexist(each_lc), nospace_in_transit(each_lc, transit_start, transit_end)])
    if np.all(abort_list) == True:
        pass
    else:
        print('Satisfies the analysis interruption condition')
        continue
    _, _, _, t0dict, _ = transit_fit_and_remove_outliers(each_lc, t0dict, outliers, estimate_period=True, lc_type='each')
_ = estimate_period(t0dict, period) #TTVを調べる。
'''

"""
ax = lc.scatter()
for i, mid_transit_time in enumerate(transit_time_list):
    ax.axvline(mid_transit_time, alpha=0.3)
plt.savefig(f'/Users/u_tsubasa/work/ring_planet_research/ring_transit/research_umetani/check_transit_timing/catalog_v/{TOI}.png')
plt.close()
"""

"""
try:
    outliers_fold = vstack(outliers_fold)
    outliers_fold.errorbar(ax=ax1, label='outliers(folded_lc)', color='blue', marker='.')
except AttributeError:
    pass
except ValueError:
    print('no outliers in folded_lc')
    pass
"""

'''
def remove_GP(lc): #remove the gaussian process from lc.stitch
    def neg_log_like(params, y, gp):
        gp.set_parameter_vector(params)
        return -gp.log_likelihood(y)

    y = lc.flux.value
    yerr = lc.flux_err.value
    t = lc.time.value

    # A non-periodic component
    Q = 1.0 / np.sqrt(2.0)
    w0 = 3.0
    S0 = np.var(y) / (w0 * Q)
    bounds = dict(log_S0=(-15, 15), log_Q=(-15, 15), log_omega0=(-15, 15))
    kernel = terms.SHOTerm(log_S0=np.log(S0), log_Q=np.log(Q), log_omega0=np.log(w0),
                           bounds=bounds)
    kernel.freeze_parameter("log_Q")  # We don't want to fit for "Q" in this term

    # A periodic component
    Q = 1.0
    w0 = 3.0
    S0 = np.var(y) / (w0 * Q)
    kernel += terms.SHOTerm(log_S0=np.log(S0), log_Q=np.log(Q), log_omega0=np.log(w0),
                            bounds=bounds)
    gp = celerite.GP(kernel, mean=np.mean(y))
    gp.compute(t, yerr)

    initial_params = gp.get_parameter_vector()
    bounds = gp.get_parameter_bounds()
    r = minimize(neg_log_like, initial_params, method="L-BFGS-B", bounds=bounds, args=(y, gp))
    gp.set_parameter_vector(r.x)
    print(r)
    pred_mean, pred_var = gp.predict(y, t, return_var=True)
    pred_std = np.sqrt(pred_var)
    color = "#ff7f0e"
    plt.errorbar(t, y, yerr=yerr, fmt=".k", capsize=0)
    plt.plot(t, pred_mean, color=color)
    plt.fill_between(t, pred_mean+pred_std, pred_mean-pred_std, color=color, alpha=0.3,
                     edgecolor="none")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.show()
    
def transit_fit_and_remove_outliers(lc, t0dict, outliers, estimate_period=False, lc_type=None):
    #不具合の出るlcはcurvefittingでも弾けるようにno_use_lcを定義
    no_use_lc = False
    while True:
        flag_time = np.abs(lc.time.value)<1.0
        lc = lc[flag_time]
        t = lc.time.value
        flux = lc.flux.value
        flux_err = lc.flux_err.value
        best_res_dict = {}
        while len(best_res_dict) == 0:
            for n in range(30):
                params = transit_params_setting(rp_rs, period)
                try:
                    out = lmfit.minimize(no_ring_transitfit, params, args=(t, flux, flux_err, p_names),max_nfev=10000)
                    #if out.params['t0'].stderr != None:
                    if out.params['t0'].stderr != None and abs(out.params['t0'].stderr) < abs(out.params['t0'].value) and out.redchi<5:
                        red_redchi = abs(out.redchi-1)
                        best_res_dict[red_redchi] = out
                        print(out.redchi)
                except ValueError:
                    print("ValueError")
        out = sorted(best_res_dict.items())[0][1]
        #lc.time = lc.time - out.params['t0'].value #t0を補正する場合に使う
        #print(lmfit.fit_report(out))

        if lc_type == 'each':
            flux_model = no_ring_model_transitfit_from_lmparams(out.params, t, p_names)
            clip_lc = lc.copy()
            clip_lc.flux = np.sqrt(np.square(flux_model - clip_lc.flux))
            _, mask = clip_lc.remove_outliers(return_mask=True)
            inverse_mask = np.logical_not(mask)

            if np.all(inverse_mask) == True:
                if estimate_period == False:
                    fig = plt.figure()
                    ax1 = fig.add_subplot(2,1,1) #for plotting transit model and data
                    ax2 = fig.add_subplot(2,1,2) #for plotting residuals
                    lc.errorbar(ax=ax1, color='black', marker='.')
                    ax1.plot(t,flux_model, label='fitting model', color='red')
                    try:
                        outliers = vstack(outliers)
                        outliers.errorbar(ax=ax1, color='cyan', label='outliers(each_lc)', marker='.')
                    except ValueError:
                        pass
                    ax1.legend()
                    ax1.set_title(f'chi square/dof: {int(out.chisqr)}/{out.nfree} ')
                    residuals = lc - flux_model
                    residuals.errorbar(ax=ax2, color='black', marker='.')
                    ax2.plot(t,np.zeros(len(t)), label='fitting model', color='red')
                    ax2.set_ylabel('residuals')
                    plt.tight_layout()
                    os.makedirs(f'{homedir}/fitting_result/figure/each_lc/{TOInumber}', exist_ok=True)
                    plt.savefig(f'{homedir}/fitting_result/figure/each_lc/{TOInumber}/{TOInumber}_{str(i)}.png', header=False, index=False)
                    os.makedirs(f'{homedir}/fitting_result/figure/each_lc/bls/{TOInumber}', exist_ok=True)
                    #plt.savefig(f'{homedir}/fitting_result/figure/each_lc/bls/{TOInumber}/{TOInumber}_{str(i)}.png', header=False, index=False)
                    plt.close()
                    t0dict[i] = [mid_transit_time+out.params["t0"].value, out.params["t0"].stderr]
                else:
                    #pass
                    ###epoch ベースの場合
                    #t0dict[i] = [transit_time+(period*i)+out.params["t0"].value, out.params["t0"].stderr]
                    ###
                    t0dict[i] = [mid_transit_time+out.params["t0"].value, out.params["t0"].stderr]
                    #t0dict[i] = [out.params["t0"].value, out.params["t0"].stderr]
                    #each_lc = clip_lc
                break
            else:
                #print('removed bins:', len(each_lc[mask]))
                outliers.append(lc[mask])
                lc = lc[~mask]
        else:
            break
        
    return lc, outliers, out, t0dict, no_use_lc

    """トランジットがデータに何個あるか判断しその周りのライトカーブデータを作成、カーブフィッティングでノーマライズ"""
    #fitting using the values of catalog
    folded_lc = lc.fold(period=period, epoch_time=transit_time)
    folded_lc = folded_lc.remove_nans()
    folded_lc, epoch_all_list = detect_transit_epoch(folded_lc, transit_time, period)

    def detect_transit_epoch(folded_lc, transit_time, period):
    """トランジットエポックの検出"""
    #epoch_all_time = ( (folded_lc.time_original.value - transit_time) + 0.5*period ) / period
    epoch_all_time = ( (folded_lc.time_original.value - transit_time)) / period
    #epoch_all= np.array(epoch_all_time, dtype = int)
    epoch_all = [Decimal(str(x)).quantize(Decimal('0'), rounding=ROUND_HALF_UP).to_eng_string() for x in epoch_all_time]
    epoch_all = np.where(epoch_all == -0, 0, epoch_all).astype('int16')
    epoch_all_list = np.unique(epoch_all)
    epoch_all_list = np.sort(epoch_all_list)
    folded_lc.epoch_all = epoch_all
    if len(np.unique(epoch_all)) != len(epoch_all_list):
        print('check: len(np.unique(epoch_all)) != len(epoch_all_list).')
        import pdb; pdb.set_trace()
    else:
        pass
    return folded_lc, epoch_all_list

def no_ring_model_transitfit_from_lmparams(params, x, p_names):
    params_batman = set_params_batman(params, p_names)
    m = batman.TransitModel(params_batman, x)    #initializes model
    model = m.light_curve(params_batman)
    return model


def remove_GP(lc): #remove the gaussian process from lc.stitch
    def neg_log_like(params, y, gp):
        gp.set_parameter_vector(params)
        return -gp.log_likelihood(y)

    y = lc.flux.value
    yerr = lc.flux_err.value
    t = lc.time.value

    # A non-periodic component
    Q = 1.0 / np.sqrt(2.0)
    w0 = 3.0
    S0 = np.var(y) / (w0 * Q)
    bounds = dict(log_S0=(-15, 15), log_Q=(-15, 15), log_omega0=(-15, 15))
    kernel = terms.SHOTerm(log_S0=np.log(S0), log_Q=np.log(Q), log_omega0=np.log(w0),
                           bounds=bounds)
    kernel.freeze_parameter("log_Q")  # We don't want to fit for "Q" in this term

    # A periodic component
    Q = 1.0
    w0 = 3.0
    S0 = np.var(y) / (w0 * Q)
    kernel += terms.SHOTerm(log_S0=np.log(S0), log_Q=np.log(Q), log_omega0=np.log(w0),
                            bounds=bounds)
    gp = celerite.GP(kernel, mean=np.mean(y))
    gp.compute(t, yerr)

    initial_params = gp.get_parameter_vector()
    bounds = gp.get_parameter_bounds()
    r = minimize(neg_log_like, initial_params, method="L-BFGS-B", bounds=bounds, args=(y, gp))
    gp.set_parameter_vector(r.x)
    print(r)
    import pdb;pdb.set_trace()
    pred_mean, pred_var = gp.predict(y, t, return_var=True)
    pred_std = np.sqrt(pred_var)
    color = "#ff7f0e"
    plt.errorbar(t, y, yerr=yerr, fmt=".k", capsize=0)
    plt.plot(t, pred_mean, color=color)
    plt.fill_between(t, pred_mean+pred_std, pred_mean-pred_std, color=color, alpha=0.3,
                     edgecolor="none")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.show()
        
    """解析中断条件を満たさないかチェック"""
    if len(each_lc) == 0:
        print('no data in this epoch')
        continue
    abort_list = np.array([transit_case_is4(each_lc, duration, period), aroud_midtransitdata_isexist(each_lc), nospace_in_transit(each_lc, transit_start, transit_end)])
    if np.all(abort_list) == True:
        pass
    else:
        print('Satisfies the analysis interruption condition')
        continue

    def judge_transit_contain(lc, transit_start, transit_end):
    if transit_end < lc.time[0].value: # || -----
        case = 1
    elif transit_start < lc.time[0].value and lc.time[0].value < transit_end and transit_end < lc.time[-1].value: # | --|---
        case = 2
    elif transit_start < lc.time[0].value and lc.time[-1].value < transit_end: # | ----- |
        case = 3
    elif lc.time[0].value < transit_start and transit_start < lc.time[-1].value and lc.time[0].value < transit_end and transit_end < lc.time[-1].value: # --|-|--
        case = 4
    elif lc.time[0].value < transit_start and transit_start < lc.time[-1].value and lc.time[-1].value < transit_end: # ---|-- |
        case = 5
    elif lc.time[-1].value < transit_start: # ----- ||
        case = 6
    else:
        print('unexcepted case')
        import pdb; pdb.set_trace()
    return case

def transit_case_is4(each_lc, duration, period, flag=False):
    """（period推定時で、）トランジットの時間帯丸々がデータに収まっていない場合は解析中断"""
    transit_start = -duration/period
    transit_end = duration/period
    #if estimate_period == True and judge_transit_contain(each_lc, transit_start, transit_end) != 4:
    if judge_transit_contain(each_lc, transit_start, transit_end) == 4:
        flag = True
    else:
        flag = False
    return flag

def aroud_midtransitdata_isexist(each_lc, flag=False):
    """midtransit周辺のデータ点がlightcurveにない場合は解析中断"""
    if len(each_lc[(each_lc.time < 0.01) & (each_lc.time > -0.01)]) == 0:
        each_lc.errorbar()
        plt.title('no data in mid transit')
        plt.savefig(f'{homedir}/fitting_result/figure/error_lc/{TOInumber}_{str(i)}.png', header=False, index=False)
        plt.close()
        flag = False
    else:
        flag = True
    return flag

def nospace_in_transit(each_lc, transit_start, transit_end, flag=False):
    """トランジット中に空白の期間があったら解析中断するための関数"""
    delta = each_lc.time.value[:-1]-each_lc.time.value[1:]
    duration_flag = ((each_lc.time > transit_start*1.1) & (each_lc.time < transit_end*1.1))[:-1]
    delta = delta[duration_flag]
    ###deltaの全ての要素が同じ→空白がない
    if np.all(delta) == True:
        flag = True
    ###2シグマ以上の外れ値がある→データの空白がある
    elif judge_outliers(delta) == True:
        #plt.scatter()
        flag = False
    else:
        flag = True
    return flag

def judge_outliers(array):
    # 2. Determine mean and standard deviation
    mean = np.mean(array)
    std_dev = np.std(array)
    # 3. Normalize array around 0
    zero_based = abs(array - mean)
    # 4. Define maximum number of standard deviations
    max_deviations = 2
    # 5. Access only non-outliers using Boolean Indexing
    outliers = array[~(zero_based < max_deviations * std_dev)]
    print(outliers)
    if len(outliers) !=0:
        return True
    else:
        return False

def remove_others_transit(lc, oridf, param_df, other_p_df, TOI):
    print('removing others planet transit in data...')
    time.sleep(1)
    cliped_lc = lc
    for _, item in other_p_df[other_p_df['TOI']!=float(TOI)].iterrows():
        others_duration = item['Duration (hours)'] / 24
        others_period = item['Period (days)']
        others_transit_time = item['Transit Epoch (BJD)'] - 2457000.0 #translate BTJD
        others_transit_time_list = np.append(np.arange(others_transit_time, lc.time[-1].value, others_period), np.arange(others_transit_time, lc.time[0].value, -others_period))
        others_transit_time_list.sort()
        import pdb;pdb.set_trace()
        if np.any(np.isnan([others_period, others_duration, others_transit_time])):
            print('nan parameter of other planet transit exist.')
            continue
        else:
            #cliped_lc, _ = clip_transit(cliped_lc, others_duration, others_transit_time_list)
            ax = lc.scatter()
            for i, mid_transit_time in enumerate(others_transit_time_list):
                print(i)
                ax.axvline(x=mid_transit_time, alpha=0.3)
            plt.show()
            import pdb;pdb.set_trace()



    #ax = lc.scatter(color='red', label='Other transit signals' )
    #cliped_lc.scatter(ax=ax, color='black')
    #plt.savefig(f'//Users/u_tsubasa/work/ring_planet_research/ring_transit/research_umetani/other_transit_signals/{TOInumber}.png')
    #plt.close()
    
    return cliped_lc

def clip_transit(lc, duration, epoch_list):
    for transit_time in epoch_list:
        transit_start = transit_time - (duration/2)
        transit_end = transit_time + (duration/2)
        case = judge_transit_contain(lc, transit_start, transit_end)
        #print('case:', case)
        #他の惑星処理に使う場合は以下の処理を行う。
        if len(lc[(lc['time'].value > transit_start) & (lc['time'].value < transit_end)]) != 0:
            lc = remove_transit_signal(case, lc, transit_start, transit_end)
        else:
            pass
            #print("don't need clip because no data around transit")

    return lc, transit_time_list

def remove_transit_signal(case, lc, transit_start, transit_end):
    if case == 1: # || -----
        pass
    elif case == 2: # | --|---
        lc = lc[~(lc['time'].value < transit_start)]
    elif case == 3: # | ----- |
        #with open('huge_transit.csv') as f:
            #f.write()
        print('huge !')
        #記録する
    elif case == 4: # --|-|--
        #lc = vstack([lc[lc['time'].value < transit_start], lc[lc['time'].value > transit_end]])
        lc = lc[(lc['time'].value < transit_start) | (lc['time'].value > transit_end)]

    elif case == 5: # ---|-- |
        lc = lc[lc['time'].value < transit_start]
    elif case == 6: # ----- ||
        pass

    return lc
'''

"""from rong_planet.py
def lnlike(mcmc_pvalues, t, y, yerr):
    return -0.5 * np.sum(((y-ring_model(t, pdic, mcmc_pvalues))/yerr) ** 2)

def log_prior(mcmc_pvalues, mcmc_params):
    #p_dict = dict(zip(mcmc_params, p))
    #rp_rs, theta, phi, r_in = p
    for i, param in enumerate(mcmc_params):
        if df_for_mcmc['mins'][param] <= mcmc_pvalues[i] <= df_for_mcmc['maxes'][param]:
            pass
        else:
            return -np.inf
        if param =='r_out' and mcmc_pvalues[i] > 3.0:
            return -np.inf
        else:
            pass
    #if 0.0 < theta < np.pi/2 and 0.0 < phi < np.pi/2 and 0.0 < rp_rs < 1 and 1.0 < r_in < 7.0:
    #    return 0.0
    return 0.0

def lnprob(mcmc_pvalues, t, y, yerr, mcmc_params):
    lp = log_prior(mcmc_pvalues, mcmc_params)
    if not np.isfinite(lp):
        return -np.inf
    chi_square = np.sum(((y-ring_model(t, pdic, mcmc_pvalues))/yerr)**2)
    print(chi_square)

    return lp + lnlike(mcmc_pvalues, t, y, yerr)

def getNearestRow(list, num):
    # リスト要素と対象値の差分を計算し最小値のインデックスを取得
    idx = np.abs(np.asarray(list) - num).argmin()
    return idx

def make_rowlist(n_transit, lc, transit_time, period):
    list = []
    for n in range(n_transit):
        target_val = transit_time + (period * n)
        mid_transit_row = getNearestRow(lc.time.value, target_val)
        list.append(mid_transit_row)
    return list
"""

"""
hole_lc_list = os.listdir('/Users/u_tsubasa/work/ring_planet_research/ring_transit/research_umetani/hole_lc_plot')
calc_t0_2ndloop_list = os.listdir('/Users/u_tsubasa/Dropbox/ring_planet_research/folded_lc/figure/obs_t0')
sym_diff = set(hole_lc_list) ^ set(calc_t0_2ndloop_list)
print(list(sym_diff))
import pdb;pdb.set_trace()
"""
"""
with open(f'{homedir}/fitting_result/data/folded_lc/modelresult/1stloop/{TOInumber}/{TOInumber}_folded.txt', 'a') as f:
    _, _, _, periodline, perioderrline = f.readlines()[-5:]
    perioderrline = perioderrline.split(' ')[-1]
    period_err = np.float(perioderrline)
    periodline = periodline.split(' ')[-1]
    period = np.float(periodline)
"""
"""
with open(f'/Users/u_tsubasa/work/ring_planet_research/ring_transit/research_umetani/fitting_result/data/folded_lc/modelresult/1stloop/{TOInumber}/{TOInumber}_folded.txt', 'r') as f:
        #durationline = f.readlines()[-5:].split(' ')[-1]
        durationline, _, _, _, _ = f.readlines()[-5:]
        durationline = durationline.split(' ')[-1]
        duration = np.float(durationline)
        """
"""
def bls_analysis(lc, period, transit_time, duration):
    print("bls analysis...")
    time.sleep(1)
    bls_period = np.linspace(10, 50, 10000)
    bls = lc.to_periodogram(
        method="bls", period=bls_period
    )  # oversample_factor=1)\
    print("bls period = ", bls.period_at_max_power)
    print(f"period = {period}")
    print("bls transit time = ", bls.transit_time_at_max_power)
    print(f"transit time = {transit_time}")
    print("bls duration = ", bls.duration_at_max_power)
    print(f"duration = {duration}")
    bls_transit_time = bls.transit_time_at_max_power.value
    catalog_lc = lc.fold(period=period, epoch_time=transit_time)
    bls_lc = lc.fold(period=period, epoch_time=bls_transit_time)
    ax = catalog_lc[np.abs(catalog_lc.time.value) < 1.0].scatter(
        label="catalog t0"
    )
    bls_lc[np.abs(bls_lc.time.value) < 1.0].scatter(
        ax=ax, color="red", label="BLS t0"
    )
    os.makedirs(
                f"/Users/u_tsubasa/Dropbox/ring_planet_research/comp_bls/",
                exist_ok=True,
                )
    plt.savefig(
        f"/Users/u_tsubasa/Dropbox/ring_planet_research/comp_bls/{TOInumber}.png"
    )
    plt.close()
    transit_time = bls_transit_time
    # duration = bls.duration_at_max_power.value
    period = bls.period_at_max_power.value

    return transit_time, period
    """